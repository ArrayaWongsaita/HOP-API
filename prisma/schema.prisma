
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  firstName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  email String @db.VarChar(100) @unique
  phone String @db.VarChar(10) @unique
  password String @db.VarChar(100)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @updatedAt


  sentChats Chat[]
  routes Route[]

}

enum RiderStatus {
  PENDING
  SUBMITTED
  APPROVED
  CANCELED
}

model Rider {
  id Int @id @default(autoincrement())
  firstName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  email String @db.VarChar(100)
  phone String @db.VarChar(10)
  password String @db.VarChar(100)
  profileImage String?
  citizenId String? @db.VarChar(13)
  dob DateTime?
  address String? @db.Text
  driverLicense String?
  licensePlate String?
  vehicleImage String?
  status RiderStatus @default(PENDING)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @updatedAt
  
  sentChats Chat[]
  routes Route[]
  payments Payment[]

}

model Admin {
  id Int @id @default(autoincrement())
  firstName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  password String @db.VarChar(100)
  email String @db.VarChar(100)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @updatedAt

  sentChats Chat[]

}

enum Status {
  PENDING
  ACCEPTED
  CANCELED
  FINISHED
}

model Route {
  id Int @id @default(autoincrement())
  customerId Int
  status Status @default(PENDING)
  pickupPlace String
  pickupLat String
  pickupLng String
  desPlace String
  desLat String
  desLng String
  rideFare Float
  distance Float
  estTime Int
  riderId Int?

  customer User @relation(fields: [customerId], references: [id])
  rider Rider? @relation(fields: [riderId], references: [id])
}

model Payment {
  id Int @id @default(autoincrement())
  riderId Int
  paymentSlip String?
  createdAt DateTime @default(now()) @db.Timestamp(0)
  approvedAt DateTime? 
  expiredDate DateTime? 


  rider Rider @relation(fields: [riderId], references: [id])
}






model Chat {
  id        Int       @id @default(autoincrement())
  userId    Int?
  riderId   Int?
  adminId   Int?
  senderBy  String?
  createdAt DateTime  @default(now())
  user      User?     @relation(fields: [userId], references: [id])
  rider     Rider?    @relation(fields: [riderId], references: [id])
  admin     Admin?    @relation(fields: [adminId], references: [id])
  messages  Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  chatId     Int
  senderRole String
  content    String
  createdAt  DateTime @default(now())
  chat       Chat     @relation(fields: [chatId], references: [id])
}








